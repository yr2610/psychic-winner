# 条件付きビルド

あらかじめシンボルを定義しておき、
テキスト内でそのシンボル（定義の有無）を参照することで、
テキストの特定の範囲を変換対象から除外したり、選択することができます。
これを条件付きビルドと呼びます。


## コマンド

- @define (シンボル名)
    シンボルを定義します。

    シンボル名はすべて半角で、
    1文字目が 英, _
    2文字目以降は 英, 数, _
    です。

- @if (条件)
    条件付きビルドをする範囲の先頭に書きます。
    条件には '!', '&&', '||' 等の演算子が使えます。

- @else
    それまでのすべての条件に漏れた場合に適用されます。
    1個の @if ～ @end の間で1回（最後のみ）しか使えません。

- @elif (条件)
    else if です。
    1個の @if ～ @end の間に連続で何度でも書くことができます。

- @end
    条件付きビルドの範囲の末尾に書きます。

- @undef (シンボル名)
    定義を無効化します。

- @error (エラーメッセージ)
    これは条件付きビルドと直接関係はないですが、
    この行が有効だとビルドエラーになります。
    エラーメッセージは省略可能ではありますが、非推奨です。


## 例

### 例1(define, if, else, end)
--------
// ここより下は FOO というシンボルが定義される
@define FOO

@if FOO
// シンボル FOO が定義されているので有効
- FOO 定義済み
@end

@if BAR
// ここではまだシンボル BAR は定義されていないので無効
- BAR 定義済み 1
@else
// 上記の条件以外の場合に適用されるので、これは有効
- BAR 未定義 その1
@end

// ! は否定演算子
@if !BAR
// !BAR は BAR の否定なので、BAR が定義されていない時に有効になる
- BAR 未定義 その2
@end

// ここより下は BAR というシンボルが定義される
@define BAR

@if BAR
// ここでは BAR 有効
- BAR 定義済み 2
@end
--------

結果
--------
- FOO 定義済み
- BAR 未定義 その1
- BAR 未定義 その2
- BAR 定義済み 2
--------

### 例2（elif）
--------
@define FOO
@define BAR
@define BAZ
@define QUX

// FOO を無効化
@undef FOO

@if FOO
// FOO は undef で無効になっているので無効
- 項目1
@elif BAR
// 判定されると、それ以降は処理されない
- 項目2
@elif BAZ
// BAZ は定義されているが、BAR が先に判定されたので、処理されない
- 項目3
@elif QUX
// QUX は定義されているが、BAR が先に判定されたので、処理されない
- 項目4
@else
// 上記以外のどれでもない場合
- 項目5
@end
--------

結果
--------
- 項目2
--------

### 例3（複雑な条件）
--------
// コマンド自体をコメントアウトで無効化も可能
//@define FOO
@define BAR
//@define BAZ
@define QUX

@if FOO || BAR
- FOO または BAR
@end

@if (FOO || BAR) && QUX
- 「FOO または BAR」且つ QUX
@end

@if BAR || BAZ && QUX
// 演算子の優先順位は
// '!' > '&&' > '||'
// なので、
// BAZ && QUX が先に判定される
// ※このような書き方は非推奨
// 優先順位を利用した書き方はひじょうにわかりにくく間違いが起こりやすいので、
// すなおに '(', ')' を使って判定順序がわかりやすいように記述すること
- BAR または 「BAZ 且つ QUX」
@end

@if !(FOO || BAR)
- 「FOO または BAR」ではない
// ちなみに「ド・モルガンの定理」を適用すると
// !FOO && !BAR
// （FOO、 BAR のどちらでもない）
// とまったく同じ意味
@end
--------

結果
--------
- FOO または BAR
- 「FOO または BAR」且つ QUX
--------


### 例4（インクルードを絡めた例）
main ファイル
--------
@define FOO

<<[bar.txt]

@if BAR
- BAR 定義済み
@end

<<[file2.txt]

@if BAZ
// BAZ は定義されてないので、ここは無効
<<[qux.txt]
@end

@if QUX
- QUX 定義済み
@end

--------

bar.txt
--------
@define BAR
--------

file2.txt
--------
@if FOO && BAR
- FOO 且つ BAR
@end
--------

qux.txt
--------
@define QUX
--------

結果
--------
- BAR 定義済み
- FOO または BAR
--------


### 例5
--------
@define FOO
//@define BAR

@if FOO || BAR
// 定義される
@define FOO_OR_BAR
@end

@if FOO && BAR
// 定義されない
@define FOO_AND_BAR
@end

@if FOO_OR_BAR
- FOO または BAR
@end

@if FOO_AND_BAR
- FOO 且つ BAR
@end
--------

結果
--------
- FOO または BAR
--------


### 例6（エラー）
--------
// FOO, BAR はどちらか１個しか定義してはいけないルールの場合
@define FOO
@define BAR

@if FOO && BAR
@error FOO と BAR がどちらも定義されています
@end
--------

結果
Makeでエラーとなる（以下のエラーメッセージが表示される）
--------
@error : 'FOO と BAR がどちらも定義されています'
--------
